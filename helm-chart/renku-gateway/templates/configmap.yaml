---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "gateway.fullname" . }}
  labels:
    app: {{ template "gateway.name" . }}
    chart: {{ template "gateway.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  traefik.toml: |
    {{ if .Values.development }}
    [Global]
      debug = true

    [log]
      level = "debug"
    {{ else }}
    [log]
      level = "error"
    {{ end }}

    [api]
      dashboard = true

    [providers]
      [providers.file]
        directory = "/config"
        filename = "rules.toml"

    [entrypoints]
      [entrypoints.http]
        address = ":{{ .Values.service.port }}"

    [accessLog]
      bufferingSize = 10

  rules.toml: |
    [http]
      [http.routers]
        [http.routers.gateway]
          entryPoints = ["http"]
          Rule = "PathPrefix(`{{ .Values.gatewayServicePrefix | default "/api/" }}auth`)"
          Service = "gateway"

        [http.routers.jupyterhub]
          entryPoints = ["http"]
          Middlewares = ["auth-jupyterhub", "common", "jupyterhub" ]
          Rule = "PathPrefix(`{{ .Values.gatewayServicePrefix | default "/api/" }}jupyterhub`)"
          Service = "jupyterhub"

        [http.routers.notebooks]
          entryPoints = ["http"]
          Middlewares = ["auth-jupyterhub", "common", "notebooks"]
          Rule = "PathPrefix(`{{ .Values.gatewayServicePrefix | default "/api/" }}notebooks`)"
          Service = "jupyterhub"

        [http.routers.webhooks]
          entryPoints = ["http"]
          Middlewares = ["auth-gitlab", "common", "webhooks"]
          Rule = "Path(`{{ .Values.gatewayServicePrefix | default "/api/" }}projects/{project-id}/graph/webhooks{endpoint:(.*)}`)"
          Service = "webhooks"

        [http.routers.graphstatus]
          entryPoints = ["http"]
          Middlewares = ["auth-gitlab", "common", "graphstatus"]
          Rule = "Path(`{{ .Values.gatewayServicePrefix | default "/api/" }}projects/{project-id}/graph/status{endpoint:(.*)}`)"
          Service = "webhooks"
        
        [http.routers.graphql]
          entryPoints = ["http"]
          Middlewares = ["common", "graphql"]
          Rule = "PathPrefix(`{{ .Values.gatewayServicePrefix | default "/api/" }}graphql`)"
          Service = "graphql"

        [http.routers.gitlab]
          entryPoints = ["http"]
          Middlewares = ["auth-gitlab", "common", "gitlab"]
          Rule = "PathPrefix(`{{ .Values.gatewayServicePrefix | default "/api/" }}`)"
          Service = "gitlab"

      [http.middlewares]
        [http.middlewares.common.chain]
          {{- if .Values.development }}
          middlewares = ["general-ratelimit", "api", "noCookies", "development"]
          {{- else }}
          middlewares = ["general-ratelimit", "api", "noCookies"]
          {{- end }}

        [http.middlewares.noCookies.headers]
          [http.middlewares.noCookies.headers.CustomRequestHeaders]
            Cookie = ""

        [http.middlewares.api.StripPrefix]
          prefixes = ["/api"]

        [http.middlewares.development.headers]
          isDevelopment = true

        [http.middlewares.gitlab.AddPrefix]
          prefix = "{{ .Values.global.gitlab.urlPrefix }}/api/v4"

        [http.middlewares.jupyterhub.ReplacePathRegex]
          regex = "^/jupyterhub/(.*)"
          replacement = "/jupyterhub/hub/api/$1"

        [http.middlewares.notebooks.ReplacePathRegex]
          regex = "^/notebooks/(.*)"
          replacement = "/jupyterhub/services/notebooks/$1"

        [http.middlewares.auth-gitlab.forwardauth]
          address = "http://{{ template "gateway.fullname" . }}-auth/?auth=gitlab"
          trustForwardHeader = true
          authResponseHeaders = ["Authorization"]

        [http.middlewares.auth-jupyterhub.forwardauth]
          address = "http://{{ template "gateway.fullname" . }}-auth/?auth=jupyterhub"
          trustForwardHeader = true
          authResponseHeaders = ["Authorization"]

        [http.middlewares.webhooks.ReplacePathRegex]
          regex = "^/projects/([^/]*)/graph/webhooks(.*)"
          replacement = "/projects/$1/webhooks$2"

        [http.middlewares.graphstatus.ReplacePathRegex]
          regex = "^/projects/([^/]*)/graph(.*)"
          replacement = "/projects/$1/events$2"
        
        [http.middlewares.graphql.ReplacePathRegex]
          regex = "/graphql"
          replacement = "/knowledge-graph/graphql"

        [http.middlewares.general-ratelimit.ratelimit]
          extractorfunc = "{{ .Values.rateLimits.general.extractorfunc }}"
          [http.middlewares.general-ratelimit.ratelimit.rateset.rate0]
            period = "{{ .Values.rateLimits.general.period }}"
            average = {{ .Values.rateLimits.general.average }}
            burst = {{ .Values.rateLimits.general.burst }}

      [http.services]
        [http.services.gateway.LoadBalancer]
          method = "drr"
          [[http.services.gateway.LoadBalancer.servers]]
            url = "http://{{ template "gateway.fullname" . }}-auth/"
            weight = 1

        [http.services.gitlab.LoadBalancer]
          method = "drr"
          [[http.services.gitlab.LoadBalancer.servers]]
            url = {{ .Values.gitlabUrl | default (printf "%s://%s/gitlab" (include "gateway.protocol" .) .Values.global.renku.domain) | quote }}
            weight = 1

        [http.services.jupyterhub.LoadBalancer]
          method = "drr"
          [[http.services.jupyterhub.LoadBalancer.servers]]
            url = {{ .Values.jupyterhub.url | default (printf "%s://%s/jupyterhub" (include "gateway.protocol" .) .Values.global.renku.domain) | quote }}
            weight = 1

        [http.services.webhooks.LoadBalancer]
          method = "drr"
          [[http.services.webhooks.LoadBalancer.servers]]
            url = {{ .Values.graph.webhookService.hostname | default (printf "http://%s-graph-webhook-service" .Release.Name ) | quote }}
            weight = 1
        
        [http.services.graphql.LoadBalancer]
          method = "drr"
          [[http.services.graphql.LoadBalancer.servers]]
            url = {{ default (printf "%s://%s" (include "gateway.protocol" .) .Values.global.renku.domain) | quote }}
            weight = 1
