---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "gateway.fullname" . }}
  labels:
    app: {{ template "gateway.name" . }}
    chart: {{ template "gateway.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  traefik.toml: |
    {{- if .Values.development }}
    [log]
      level = "DEBUG"
    {{ else }}
    [log]
      level = "ERROR"
    {{ end -}}

    [api]
      dashboard = true

    [providers]
      [providers.file]
        directory = "/config"

    [entrypoints]
      [entrypoints.http]
        address = ":{{ .Values.service.port }}"

    [accessLog]
      bufferingSize = 10

  routers.toml: |
    [http]
      [http.routers]
        [http.routers.apiRedirect]
          entryPoints = ["http"]
          Middlewares = ["apiRediredctEncodeSlash", "apiRedirect"]
          Rule = "PathPrefix(`/entities`) && HeadersRegexp(`Accept`,`application/json`)"
          Service = "default"

        [http.routers.uiRedirect]
          entryPoints = ["http"]
          Middlewares = ["uiRedirect"]
          Rule = "PathPrefix(`/entities`) && HeadersRegexp(`Accept`,`text/html`)"
          Service = "default"

        [http.routers.gateway]
          entryPoints = ["http"]
          Rule = "PathPrefix(`{{ printf "/%s/auth" .Values.gatewayServicePrefix | clean }}`)"
          Service = "gateway"

        [http.routers.notebooks]
          entryPoints = ["http"]
          Middlewares = ["auth-notebook", "common"]
          Rule = "PathPrefix(`{{ printf "/%s/notebooks" .Values.gatewayServicePrefix | clean }}`)"
          Service = "notebooks"

        [http.routers.webhooks]
          entryPoints = ["http"]
          Middlewares = ["auth-gitlab", "common", "webhooks"]
          Rule = "Path(`{{ printf "/%s/projects/{project-id}/graph/webhooks{endpoint:(.*)}" .Values.gatewayServicePrefix | clean }}`)"
          Service = "webhooks"

        [http.routers.graphstatus]
          entryPoints = ["http"]
          Middlewares = ["auth-gitlab", "common", "graphstatus"]
          Rule = "Path(`{{ printf "/%s/projects/{project-id}/graph/status{endpoint:(.*)}" .Values.gatewayServicePrefix | clean }}`)"
          Service = "webhooks"

        [http.routers.datasets]
          entryPoints = ["http"]
          Middlewares = ["common", "knowledgeGraph"]
          Rule = "PathPrefix(`{{ printf "/%s/datasets" .Values.gatewayServicePrefix | clean }}`)"
          Service = "knowledgeGraph"

        [http.routers.direct]
          # This is to access undocumented APIs in GitLab
          entryPoints = ["http"]
          Middlewares = ["direct","gitlabOnly"]
          Rule = "PathPrefix(`{{ printf "/%s/direct" .Values.gatewayServicePrefix | clean }}`)"
          Service = "gitlab"
        
        [http.routers.gitlabGraphql]
          entryPoints = ["http"]
          Middlewares = ["auth-gitlab","api","gitlabOnly","gitlabGraphql"]
          Rule = "PathPrefix(`{{ printf "/%s/graphql" .Values.gatewayServicePrefix | clean }}`)"
          Service = "gitlab"

        [http.routers.gitlab]
          # Currently gitlab acts as fallback backend service, we
          # therefore fix the priority of this router to the lowest
          # possible value.
          priority = 1
          entryPoints = ["http"]
          Middlewares = ["auth-gitlab", "common", "gitlabApi"]
          Rule = "PathPrefix(`{{ printf "/%s/" .Values.gatewayServicePrefix | clean }}`)"
          Service = "gitlab"

        [http.routers.gitlabRenkuCli]
          # Access to gitlab server from a git repo with CLI token
          entryPoints = ["http"]
          Middlewares = ["auth-cliGitlab", "common", "cliGitlab"]
          Rule = "PathPrefix(`/repos`)"
          Service = "gitlab"

        [http.routers.renku]
          entryPoints = ["http"]
          Middlewares = ["auth-renku", "common"]
          Rule = "PathPrefix(`{{ printf "/%s/renku" .Values.gatewayServicePrefix | clean }}`)"
          Service = "core"

        [http.routers.kg]
          entryPoints = ["http"]
          Middlewares = ["auth-gitlab", "common", "kg", "knowledgeGraph"]
          Rule = "PathPrefix(`{{ printf "/%s/kg" .Values.gatewayServicePrefix | clean }}`)"
          Service = "knowledgeGraph"

  middlewares.toml: |
    [http]
      [http.middlewares]

        # We assume entity IDs which are URL-safe except <namespace>/<project-name>
        # IDs (so all IDs with one forward-slash) for projets which we capture and
        # URL-encode explicitly. Full URL-encoding is tricky with GO regexes.
        [http.middlewares.apiRediredctEncodeSlash.redirectRegex]
          regex = "http://(.*)/entities/([^/]*)/([^/]*)/(.*)"
          replacement = "{{(include "gateway.protocol" .)}}://${1}/api/${2}/${3}%2F${4}"

        [http.middlewares.apiRedirect.redirectRegex]
          regex = "http://(.*)/entities/(.*)"
          replacement = "{{(include "gateway.protocol" .)}}://${1}/api/${2}"

        [http.middlewares.uiRedirect.redirectRegex]
          regex = "http://(.*)/entities/(.*)"
          replacement = "{{(include "gateway.protocol" .)}}://${1}/${2}"

        [http.middlewares.common.chain]
          middlewares = ["noCookies", "api"]

        [http.middlewares.noCookies.headers]
          [http.middlewares.noCookies.headers.customRequestHeaders]
            Cookie = ""

        [http.middlewares.api.stripPrefix]
          prefixes = ["/api"]

        [http.middlewares.gitlabOnly.addPrefix]
          prefix = "{{ printf "/%s/" .Values.global.gitlab.urlPrefix | clean }}"

        [http.middlewares.gitlabApi.addPrefix]
          prefix = "{{ printf "/%s/api/v4" .Values.global.gitlab.urlPrefix | clean }}"

        [http.middlewares.cliGitlab.replacePathRegex]
          regex = "^/repos/(.*)"
          replacement = "{{ printf "/%s/$1" .Values.global.gitlab.urlPrefix | clean }}"


        [http.middlewares.auth-gitlab.forwardAuth]
          address = "http://{{ template "gateway.fullname" . }}-auth/?auth=gitlab"
          trustForwardHeader = true
          authResponseHeaders = ["Authorization"]

        [http.middlewares.auth-cliGitlab.forwardAuth]
          address = "http://{{ template "gateway.fullname" . }}-auth/?auth=cli-gitlab"
          trustForwardHeader = true
          authResponseHeaders = ["Authorization"]

        [http.middlewares.auth-renku.forwardAuth]
          address = "http://{{ template "gateway.fullname" . }}-auth/?auth=renku"
          trustForwardHeader = true
          authResponseHeaders = ["Authorization", "Renku-user-id", "Renku-user-fullname", "Renku-user-email"]

        [http.middlewares.auth-notebook.forwardAuth]
          address = "http://{{ template "gateway.fullname" . }}-auth/?auth=notebook"
          trustForwardHeader = true
          authResponseHeaders = ["Renku-Auth-Access-Token", "Renku-Auth-Id-Token", "Renku-Auth-Git-Credentials", "Renku-Auth-Anon-Id"]


        [http.middlewares.webhooks.replacePathRegex]
          regex = "^/projects/([^/]*)/graph/webhooks(.*)"
          replacement = "/projects/$1/webhooks$2"

        [http.middlewares.graphstatus.replacePathRegex]
          regex = "^/projects/([^/]*)/graph(.*)"
          replacement = "/projects/$1/events$2"

        [http.middlewares.kg.stripPrefix]
          prefixes = ["/kg"]

        [http.middlewares.knowledgeGraph.addPrefix]
          prefix = "/knowledge-graph"

        [http.middlewares.direct.replacePathRegex]
          regex = "^/api/direct/(.*)"
          replacement = "/$1"

        [http.middlewares.gitlabGraphql.replacePathRegex]
          regex = "(.*)/graphql(.*)"
          replacement = "/$1/api/graphql$2"

  services.toml: | 
    [http]
      [http.services]
        [http.services.gateway.loadBalancer]
          passHostHeader = false
          [[http.services.gateway.loadBalancer.servers]]
            url = "http://{{ template "gateway.fullname" . }}-auth/"

        [http.services.gitlab.loadBalancer]
          passHostHeader = false
          [[http.services.gitlab.loadBalancer.servers]]
            url = "{{ .Values.gitlabUrl | default (printf "%s://%s/gitlab" (include "gateway.protocol" .) .Values.global.renku.domain) }}"

        [http.services.notebooks.loadBalancer]
          passHostHeader = false
          [[http.services.notebooks.loadBalancer.servers]]
            url = "{{ printf "http://%s-notebooks" .Release.Name }}"

        [http.services.webhooks.loadBalancer]
          passHostHeader = false
          [[http.services.webhooks.loadBalancer.servers]]
            url = "{{ printf "http://%s-webhook-service" .Release.Name }}"

        [http.services.knowledgeGraph.loadBalancer]
          passHostHeader = false
          [[http.services.knowledgeGraph.loadBalancer.servers]]
          url = "{{ printf "http://%s-knowledge-graph" .Release.Name }}"

        [http.services.core.loadBalancer]
          passHostHeader = false
          [[http.services.core.loadBalancer.servers]]
          url = "{{ printf "http://%s-core" .Release.Name }}"

        # We need a default backend, should never be hit
        [http.services.default.loadBalancer]
          [[http.services.default.loadBalancer.servers]]
          url = "{{ printf "%s://%s" (include "gateway.protocol" .) .Values.global.renku.domain }}"
