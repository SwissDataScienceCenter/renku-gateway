# Default values for the gateway.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Usually this service is reachable under https://<renku-host>/api/
gatewayServicePrefix: /api

gateway:
  ## Optional list of allowed sources for Cross-Origin Resource Sharing.
  ## https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
  allowOrigin:
  # - http://example.com
  # - https://foo.example.com

## Global variables
## Shared values/secrets
global:
  ## Set to true if using https
  useHTTPS: false
  ## The URL path prefix under which gitlab is running.
  ## Must contain a leading slash, use "/" for root path.
  gitlab:
    urlPrefix: /gitlab
  gateway:
    ## Client secret of the renku client application registered in keycloak.
    ## Should be set to a proper value (i.e. by using openssl rand -hex 32) for production.
    ## Can be set here or as .clientSecret outside of .global, the values set ouside of global (if defined) take precedence.
    clientSecret:
    ## Client secret of the renku-cli client application registered in keycloak.
    ## Should be set to a proper value (i.e. by using openssl rand -hex 32) for production.
    ## Can be set here or as .cliClientSecret outside of .global, the values set ouside of global (if defined) take precedence.
    cliClientSecret:
    ## Client id and client secret of the renku gateway client application which is registered in GitLab.
    ## Can be set here or as .gitlabClientId outside of .global, the values set ouside of global (if defined) take precedence.
    gitlabClientId: #renku
    ## Should be set to a proper value (i.e. by using openssl rand -hex 32) for production.
    ## Can be set here or as .gitlabClientSecret outside of .global, the values set ouside of global (if defined) take precedence.
    gitlabClientSecret:
  renku:
    ## Domain name for the deployed instance of Renku. Most likely
    ## set by parent chart.
    domain: example.local

    ## Set the Keycloak Realm name used by Renku here - the default
    ## value is "Renku" and is set on the application level. You may
    ## override this here if you are using an external Keycloak instance
    ## and want to use an existing realm. If Keycloak is deployed as a
    ## part of Renku DO NOT change this value.
    # keycloak:
    #   realm: Renku

  anonymousSessions:
    ## Set this to true for anonymous notebook sessions.
    enabled: false

  keycloak:
    ## Explicitly set another realm than "renku" here
    realm:
  ## Specify a secret that containes the certificate
  ## if you would like to use a custom CA. The key for the secret
  ## should have the .crt extension otherwise it is ignored. The
  ## keys across all secrets are mounted as files in one location so
  ## the keys across all secrets have to be unique. 
  ## In addition to this the certificates have to be seperately defined
  ## in the Traefik section below for the Traefik Helm sub-chart.
  certificates:
    image:
      repository: renku/certificates
      tag: "0.0.2"
    customCAs: []
      # - secret:

  ## Specify the information required to connect to a redis instance.
  ## All the values below are required.
  ## Note that in almost all real-world use cases Redis is provided
  ## with the Renku helm chart not with every component of Renku.
  ## Therefore in most cases these values do not need to be modified.
  ## But in the rare cases where the values need to be modified, then this should be
  ## done in the global section for the renku helm chart, not in every component.
  redis:
    sentinel:
      ## Set to true if redis host/port point to a redis sentinel.
      enabled: true
      masterSet: mymaster
    dbIndex:
      gateway: "0"
    host: renku-redis
    port: 26379
    clientLabel:
      renku-redis-client: "true"
    existingSecret: redis-secret
    existingSecretPasswordKey: redis-password

replicaCount: 1

## Set to true to enable the developement mode. This has negative security
## implications and should never be done in a production setting.
development: false

## To protect the backend services from an excessive amount of API calls
## issued by one client, one can enforce rate limits here. The limits apply
## per UI client session (identified by the cookies). For an explanation of
## the different values check out the rate limiting documentation of traefik
## v2.0.
rateLimits:
  ## General rate limit, applies to all /api calls combined.
  general:
    period: 10s
    average: 20
    burst: 100

## Set to a custom GitLab URL if deployed manually
# gitlabUrl:

## For production deployment, you will need to define the secret key.
## This is a random string, used for cryptographic operations on cookies.
## Use `openssl rand -hex 32`.
secretKey:

image:
  ## Define the image for the auth middleware
  auth:
    name: renku/renku-gateway
    repository: renku/renku-gateway
    tag: "latest"
    pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

podSecurityContext: {}

securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  allowPrivilegeEscalation: false

## Settings for the graph services
graph:
  webhookService:
    ## Set the hostname under which the webhook service
    ## can be reached (internally). This will default to
    ## http://<release-name>-webhook-service
    hostname:
  knowledgeGraph:
    ## Set the hostname under which the webhook service
    ## can be reached (internally). This will default to
    ## http://<release-name>-knowledge-graph
    hostname:

core:
  ## Set the hostname under which the core service
  ## can be reached (internally). This will default to
  ## http://<release-name>-core
  hostname:

notebooks:
  hostname:

# GitLab has introduced a new logout behavior in 12.7.0
# which was initially broken and fixed in 12.9.0.
# Set this to 'true' for versions < 12.7.0, leave it to
# 'false' for versions >= 12.9.0.
oldGitLabLogout: false

# For deployments with an external GitLab instance, we don't want to terminate
# a GitLab session when users log out from Renku. By default, we assume that a
# dedicated GitLab instance is deployed, so, logging out from Renku should
# trigger a logout from GitLab.
logoutGitLabUponRenkuLogout: true

# By default the gateway will strip all cookies. If specific cookies should be
# kept (i.e. for sticky ingress routing) specify them here
keepCookies: []

# sentry configuration
sentry:
  enabled: false
  dsn:
  environment:

# An ingress could be enabled here. Usually the gateway runs
# without its own ingress.
ingress:
  enabled:

traefik:
  image:
    name: renku/traefik
    tag: latest
  anchors:
    nameOverride: &nameOverride renku-traefik
  affinity:
  # This pod anti-affinity tries tp schedule traefik pods on different nodes.
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  # Note that currently this will not distinguish between renku-traefik instances in different namepsaces. This 
                  # could be changed: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#namespace-selector
                  values:
                    - *nameOverride
            topologyKey: kubernetes.io/hostname
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    metrics:
      - type: Resource
        resource:
          name: cpu
          targetAverageUtilization: 60
      - type: Resource
        resource:
          name: memory
          targetAverageUtilization: 60
  additionalArguments:
    - "--providers.file.directory=/config"
    - "--experimental.localPlugins.cookiefilter.moduleName=github.com/SwissDataScienceCenter/cookiefilter"
    ## If using custom/self-signed CA certificates uncomment the value below and 
    ## adjust the volumes section below
    # - "--serversTransport.rootCAs=/ca-certs/foo.crt,/ca-certs/bar.crt"
  fullnameOverride: *nameOverride
  globalArguments:
    - "--global.checknewversion"
  logs:
    access:
    # To enable access logs
      enabled: true
      format: json
      bufferingSize: 10
      fields:
        general:
          defaultmode: keep
        headers:
          defaultmode: keep
          names:
            Authorization: redact
            Cookie: redact
            Renku-Auth-Access-Token: redact
            Renku-Auth-Git-Credentials: redact
    general:
      format: json
      # By default, the level is set to ERROR. Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
      level: ERROR
  nameOverride: *nameOverride
  ingressRoute:
    dashboard:
      enabled: false
  podDisruptionBudget:
    enabled: true
    maxUnavailable: 50%
  ports:
    websecure:
      expose: false
  providers:
    kubernetesCRD:
      enabled: false
    kubernetesIngress:
      enabled: false
  rbac:
    # If set to false (i.e. default) then you get a ClusterRole, this way you get a Role
    namespaced: true
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "300m"
      memory: "200Mi"
  service:
    enabled: true
    type: ClusterIP
  volumes:
    - name: renku-traefik-config
      mountPath: "/config"
      type: configMap
    ## List secrets to mount custom/self-signed CA certificates secrets here!
    ## The Traefik helm chart templating can handle type secret and/or configMap and automatically
    ## mount them in the specified location
    # - name: custom-ca-certs-secret
    #   mountPath: "/ca-certs"
    #   type: secret
