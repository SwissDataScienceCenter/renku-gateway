# Default values for the gateway.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global variables
## Shared values/secrets
global:
  gitlab:
    ## Client secret, set this to a random string.
    ## To change this value after deploying, first generate a new secret using the Keycloak admin console
    ## then paste the generated secret here
    clientSecret: open_secret
    ## Name of the postgres database to be used by Gitlab
    postgresDatabase: gitlabhq_production
    ## Postgres user for the gitlab database
    postgresUser: gitlab
    ## Postgres password for the gitlab database
    postgresPassword: gitlab
  keycloak:
    ## Name of the postgres database to be used by Keycloak
    postgresDatabase: keycloak
    ## Postgres user for the Keycloak database
    postgresUser: keycloak
    ## Postgres password for the Keycloak database
    postgresPassword: keycloak
  renku:
    ## Set to true if using https
    https: false
    ## Domain name for the deployed instance of renku
    domain: example.local

replicaCount: 1

## Set to a custom base URL if deployed manually
# baseUrl: "http://127.0.0.1:8080"
## Set to a custom GitLab URL if deployed manually
# gitlabUrl: "http://gitlab.renku.build"

## Configure application ID from "{{ gitlabUrl }}/oauth/application"
## by setting redirect URL to "{{ baseUrl }}/login/redirect/gitlab"
## and set the application ID as the "gitlabClientId" chart value.
## The client ID for authentication against gitlab
# gitlabClientId: renku-ui
## The client secret for authentication against gitlab
# gitlabClientSecret: no-secret

## You can restrict here the allowed origins for CORS.
## This can be a single value, a comma-separeted list or *.
# allowOrigin: "*"

## For production deployment, you will need to define the secret key
## This is a random string, used for cryptographic operations on cookies
## use `openssl rand -hex 32`
secretKey:

jupyterhub:
  ## the url of the jupyterhub deployment
  # url:
  ## Client ID, this should match the jupyter hub config of services: oauth_client_id
  clientId: gateway
  ## Client secret, this should match the api_token
  ## use `openssl rand -hex 32`
  clientSecret:

image:
  name: traefik
  repository: traefik
  tag: 'v2.0'
  pullPolicy: IfNotPresent

  ## Define image for auth middleware
  auth:
    name: renku/renku-gateway
    repository: renku/renku-gateway
    tag: '0.4.0'
    pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

redis:

  nameOverride: gw-redis

  cluster:
    enabled: false

  usePassword: false

  master:
    persistence:
      enabled: false

  networkPolicy:
    enabled: true
    allowExternal: false

## Settings for the graph services
graph:
  sparql:
    endpoint:
    # username: admin
    # password: 12345
  webhookService:
    hostname:
