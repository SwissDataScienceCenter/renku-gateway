// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// PostBackchannelLogoutFormdataBody defines parameters for PostBackchannelLogout.
type PostBackchannelLogoutFormdataBody struct {
	LogoutToken string `json:"logout_token"`
}

// PostCliLoginCompleteFormdataBody defines parameters for PostCliLoginComplete.
type PostCliLoginCompleteFormdataBody struct {
	LoginID string `json:"loginID"`
}

// GetLoginParams defines parameters for GetLogin.
type GetLoginParams struct {
	RedirectUrl *string   `form:"redirectUrl,omitempty" json:"redirectUrl,omitempty"`
	ProviderId  *[]string `form:"providerId,omitempty" json:"providerId,omitempty"`
}

// GetLogoutParams defines parameters for GetLogout.
type GetLogoutParams struct {
	RedirectUrl *string `form:"redirectUrl,omitempty" json:"redirectUrl,omitempty"`
}

// PostBackchannelLogoutFormdataRequestBody defines body for PostBackchannelLogout for application/x-www-form-urlencoded ContentType.
type PostBackchannelLogoutFormdataRequestBody PostBackchannelLogoutFormdataBody

// PostCliLoginCompleteFormdataRequestBody defines body for PostCliLoginComplete for application/x-www-form-urlencoded ContentType.
type PostCliLoginCompleteFormdataRequestBody PostCliLoginCompleteFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /backchannel-logout)
	PostBackchannelLogout(ctx echo.Context) error

	// (GET /callback)
	GetCallback(ctx echo.Context) error

	// (POST /cli/login-complete)
	PostCliLoginComplete(ctx echo.Context) error

	// (POST /cli/login-init)
	PostCliLoginInit(ctx echo.Context) error

	// (GET /health)
	GetHealth(ctx echo.Context) error

	// (GET /login)
	GetLogin(ctx echo.Context, params GetLoginParams) error

	// (GET /logout)
	GetLogout(ctx echo.Context, params GetLogoutParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostBackchannelLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostBackchannelLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBackchannelLogout(ctx)
	return err
}

// GetCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCallback(ctx)
	return err
}

// PostCliLoginComplete converts echo context to params.
func (w *ServerInterfaceWrapper) PostCliLoginComplete(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCliLoginComplete(ctx)
	return err
}

// PostCliLoginInit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCliLoginInit(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCliLoginInit(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLoginParams
	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", ctx.QueryParams(), &params.RedirectUrl)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirectUrl: %s", err))
	}

	// ------------- Optional query parameter "providerId" -------------

	err = runtime.BindQueryParameter("form", true, false, "providerId", ctx.QueryParams(), &params.ProviderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogin(ctx, params)
	return err
}

// GetLogout converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogoutParams
	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", ctx.QueryParams(), &params.RedirectUrl)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirectUrl: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogout(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/backchannel-logout", wrapper.PostBackchannelLogout)
	router.GET(baseURL+"/callback", wrapper.GetCallback)
	router.POST(baseURL+"/cli/login-complete", wrapper.PostCliLoginComplete)
	router.POST(baseURL+"/cli/login-init", wrapper.PostCliLoginInit)
	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/login", wrapper.GetLogin)
	router.GET(baseURL+"/logout", wrapper.GetLogout)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWTW8bNxD9KwTPK8lxetKtsYFEqIEU/Tg1RkCTo13GFLkezkpRjf3vxQwl2Yp2Zbdw",
	"DwYsLofz+ObN4zxqm1ZtihAp6/ljX2kfl0nPH7WDbNG35FPUc32Tah/VMqRNpT7/3FGjrAnhztj7rEx0",
	"ynTUQCRvDQeoZUL1G8T7TleaPAXQcy2/VW0INmarK70GzOXw9TvdVzq1EE3r9Vy/n15ML3WlW0MNo9Iz",
	"TmQbEyOESUh16oiX25TpFOonE10AxSGTXYwqMQrhoYNMWS0xrdQvsLUhmfvpl6glPQr4hdNz/WvK9OEp",
	"6U3JWendCR+S23JmmyJBFBCmbcPu+rPvk81mM1kmXE06DBBtcuB4U7YNrIxgR05IHuSCBd9XSvcQ+ffK",
	"xxuINTV6/q7StG2ZwEzoY637vsDwyGf+dRx7e9id7r6BJd0fbyfsQBZym2IuyS8vLk5Z/KMB1WVAtTFZ",
	"5c5ayHnZhbBlLmtwivnoK/1TCR4h4ltO8dy9ATHhixeuyr6vRwj/HUkl0TA7Ixe3qQtOxUTqDo4u3Vea",
	"TJ352MS617e8NNs3BEOrYUCY3DYJ/d+lRVgT0lCHTuK0TlFSCBb8GhQ1II31YxCL10T1mb9dqi/RO249",
	"2qoW09o7QGlJ+M7irUF5kn40URkpoxKpDKn+I9DV/hY/iOT9xeWwSBgEpiOALJn9XYyVIpS7PEsvEHlx",
	"11HKZ4XgPIIlcGrZITWA42QHPwvsSRP2rwAE44bwEShLKtavypDZdhbXatNAlHU5iAHsz3LTQUO4Cl58",
	"8Gqf8v/0Ax8X1/zvi80vG4eUPdLn/7FVD7y9DOpp62sbrlTgQP+R4Uyf2cxYZGOydOrhhIrL6SB6blp8",
	"qvLimj/w1rUJ3k2PBGaDP5GXj/7MW/M7GdyJqwBpMYnGl7uk/Hd1szivpwXneNNivYl+qsEZYFdcZRGM",
	"dMowgw2YwM484oWf5LNtwN4riK5NPtJ0yI/KRv3aJysDrr0FcZMuRh9rVZgRHT1DKmNOgSocjCI9W2KZ",
	"aQZxC1kyw6BZAQFy1kfNifRDB8gTUDQrZnxve39i0NWzkp5Ubjh8b/oLdxTtCVZ54JhDoQ2izGFd9A8d",
	"LMp2mQ/629eavzyUx85NSbgqrO8pMzVMR738aaAbLMBNquVEycVTXFoW3hU/PF3dFG/HFOkw762AmuRG",
	"nrjDMPeGtbl9y5nqPN1nguVRPa3F7pGCp29SkeGC9JXmJtqT0mHQcz0zrZ/Jjv62/ycAAP//idoKfDQM",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
